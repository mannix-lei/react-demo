{"version":3,"sources":["login/login.tsx","register/register.tsx","Router.tsx","serviceWorker.ts","index.tsx","login/login.module.scss"],"names":["Login","Form","useForm","loginForm","tailLayout","wrapperCol","offset","span","useState","loginVisible","setloginVisible","className","style","body","btnGroup","onClick","login","form","labelCol","name","colon","hideRequiredMark","initialValues","remember","onFinish","Item","label","rules","required","message","Password","valuePropName","type","htmlType","Register","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"2RAIaA,EAAQ,WAAO,IAAD,EACHC,IAAKC,UAAlBC,EADgB,oBAMjBC,EAAa,CACfC,WAAY,CAAEC,OAAQ,EAAGC,KAAM,KAPZ,EASiBC,oBAAS,GAT1B,mBAShBC,EATgB,KASFC,EATE,KAqBvB,OACI,yBAAKC,UAAWC,IAAMC,MACjBJ,EACG,yBAAKE,UAAWC,IAAME,UAClB,kBAAC,IAAD,CAAQC,QAdP,WACbL,GAAgB,KAaJ,WACA,kBAAC,IAAD,iBAGJ,yBAAKC,UAAWC,IAAMI,OAClB,kBAAC,IAAD,eACIC,KAAMd,GA7BX,CACXe,SAAU,CAAEX,KAAM,GAClBF,WAAY,CAAEE,KAAM,KA0BR,CAGIY,KAAK,QACLC,OAAO,EACPC,kBAAkB,EAClBC,cAAe,CAAEC,UAAU,GAC3BC,SAnBN,eAqBM,kBAAC,IAAKC,KAAN,CACIC,MAAM,WACNP,KAAK,WACLQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAGJ,kBAAC,IAAKJ,KAAN,CACIC,MAAM,WACNP,KAAK,WACLQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAMC,SAAP,OAGJ,kBAAC,IAAKL,KAAN,iBAAerB,EAAf,CAA2Be,KAAK,WAAWY,cAAc,YACrD,kBAAC,IAAD,qBAGJ,kBAAC,IAAKN,KAASrB,EACX,kBAAC,IAAD,CAAQ4B,KAAK,UAAUC,SAAS,UAAhC,eC9DfC,EAAW,WACpB,OACI,0CCgBOC,EAfH,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,KACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,aACR,kBAAC,EAAD,U,OCDAC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAMzB,a,mBEvIpC2B,EAAOC,QAAU,CAAC,KAAO,oBAAoB,WAAa,0BAA0B,MAAQ,qBAAqB,SAAW,2B","file":"static/js/main.4bee650e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport style from './login.module.scss';\nimport { Button, Form, Input, Checkbox } from 'antd';\n\nexport const Login = () => {\n    const [loginForm] = Form.useForm();\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    };\n    const [loginVisible, setloginVisible] = useState(false);\n\n    const handleOk = () => {\n        setloginVisible(true);\n    };\n    // const handleCancel = () => {\n    //     setloginVisible(false);\n    // };\n\n    const login = () => {\n\n    };\n    return (\n        <div className={style.body}>\n            {loginVisible ? (\n                <div className={style.btnGroup}>\n                    <Button onClick={handleOk}>Sign In</Button>\n                    <Button>Sign Up</Button>\n                </div>\n            ) : (\n                <div className={style.login}>\n                    <Form\n                        form={loginForm}\n                        {...layout}\n                        name=\"basic\"\n                        colon={false}\n                        hideRequiredMark={true}\n                        initialValues={{ remember: true }}\n                        onFinish={login}\n                    >\n                        <Form.Item\n                            label=\"Username\"\n                            name=\"username\"\n                            rules={[{ required: true, message: 'Please input your username!' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Password\"\n                            name=\"password\"\n                            rules={[{ required: true, message: 'Please input your password!' }]}\n                        >\n                            <Input.Password />\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n                            <Checkbox>Remember me</Checkbox>\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            )}\n        </div>\n    );\n};\n","import React from \"react\";\n\nexport const Register = () => {\n    return (\n        <div>\n            Register\n        </div>\n    )\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport { Login } from './login/login';\nimport { Register } from './register/register';\n\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path='/'>\n                    <Login />\n                </Route>\n                <Route path='/register'>\n                    <Register />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport const register = (config: any) => {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n};\n\nfunction registerValidSW(\n    swUrl: string,\n    config: {\n        onUpdate: (arg0: ServiceWorkerRegistration) => void;\n        onSuccess: (arg0: ServiceWorkerRegistration) => void;\n    }\n) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: RequestInfo, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl as string, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Router';\nimport 'antd/dist/antd.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"login_body__1dTko\",\"bodyfilter\":\"login_bodyfilter__2KDCI\",\"login\":\"login_login__2tCnD\",\"btnGroup\":\"login_btnGroup__2n_dA\"};"],"sourceRoot":""}